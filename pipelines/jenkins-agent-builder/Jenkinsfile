pipeline {
    agent {
        dockerfile {
            filename 'pipelines/jenkins-agent-builder/Dockerfile'
        }
    }
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    parameters {
        string(name: 'PROXMOX_IP', defaultValue: 'cyberops2.pizzasec.com', description: 'ProxMox IP address')
        string(name: 'PROXMOX_NODE', defaultValue: 'cyberops2', description: 'ProxMox to build the box on')
        string(name: 'PROXMOX_POOL', defaultValue: 'Admin', description: 'ProxMox resource pool to assign')
        string(name: 'TEMPLATE', defaultValue: 'ubuntu-22', description: 'Name of the template to use')
        choice(name: 'CORES', choices: ['2', '4', '8'], description: 'Number of cores that will be allocated to the VM')
        choice(name: 'MEMORY', choices: ['2048', '4096', '8192'], description: 'Memory allocation for the VM in MB')
        string(name: 'STORAGE', defaultValue: '20', description: 'Storage for the VM in GB')
        string(name: 'VM_NAME', defaultValue: 'jenkins-agent', description: 'Name of the box to build')
        string(name: 'ROLE', defaultValue: 'jenkins', description: 'Why is this box being built')
        string(name: 'BRANCH', defaultValue: 'master', description: 'If this is associated with a git branch, assign it')
        choice(name: 'NETWORK', choices: ['vmbr0', 'vmbr1', 'patron'], description: 'Network to place the VM on')
        string(name: 'JENKINS_HOSTNAME', defaultValue: 'jenkins.pizzasec.com', description: 'URL of Jenkins')
        string(name: 'AGENT_NAME', defaultValue: 'main', description: 'Name of the new agent')
        string(name: 'AGENT_EXECUTORS', defaultValue: '10', description: 'Number of executors for the new agent')
        string(name: 'DOCKER_REGISTRY', defaultValue: 'registry.pizzasec.com', description: 'HTTPS endpoint for private docker registry')
        booleanParam(name: 'USE_EXISTING_VM', defaultValue: false, description: 'Skip box-builder and use an existing VM IP')
        string(name: 'EXISTING_AGENT_IP', defaultValue: '', description: 'If using existing VM, provide its IP address')
        string(name: 'SSH_USERNAME', defaultValue: 'victim', description: 'User to ssh with to new jenkins agents')

    }
    environment {
        JENKINS_API_USER    = "jenkins"
        JENKINS_API_TOKEN   = credentials('JENKINS_API_TOKEN')
        SECRET_FILE         = "TEMP_SECRET.txt"
        SSH_KEY_FILE        = "internal_ssh_key.pem"
    }
    stages {
        stage('Parameter Validation') {
            steps {
                script {
                    cleanWs()
                    if (!params.ROLE.matches('^[a-zA-Z0-9._/-]+$')) {
                        error("Invalid ROLE parameter. Only letters, numbers, '.', '_', '-', and '/' are allowed.")
                    }
                    if (!params.BRANCH.matches('^[a-zA-Z0-9._/-]+$')) {
                        error("Invalid BRANCH parameter. Only letters, numbers, '.', '_', '-', and '/' are allowed.")
                    }
                    if (!params.STORAGE.isInteger() || params.STORAGE.toInteger() > 200) {
                        error("Invalid STORAGE parameter. It must be a number and less than or equal to 200.")
                    }
                }
            }
        }
        
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/master']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    userRemoteConfigs: [[url: 'https://github.com/OrangeSquirter/homelab-seed.git']]
                ])
            }
        }
        stage('Configure Agent On Master') {
            steps {
                script {
                    dir('pipelines/jenkins-agent-builder') {
                        sh """
                            echo "Set up agent on controller"
                            python generate-agent.py \
                                --jenkins-url   "http://${params.JENKINS_HOSTNAME}:8080" \
                                --agent-name    ${params.AGENT_NAME} \
                                --username      ${JENKINS_API_USER} \
                                --api-token     ${JENKINS_API_TOKEN} \
                                --label         ${params.NETWORK} \
                                --executors     ${params.AGENT_EXECUTORS} \
                                --secret-file   ${SECRET_FILE}
                        """
                        stash name: 'agent-secrets', includes: SECRET_FILE
                    }
                }
            }
        }
        stage('Build Box') {
            when {
                expression { return !params.USE_EXISTING_VM }
            }
            steps {
                script {
                    def buildbox = build job: 'box-builder',
                        parameters: [
                            string(name: 'PROXMOX_IP',      value: params.PROXMOX_IP),
                            string(name: 'PROXMOX_NODE',    value: params.PROXMOX_NODE),
                            string(name: 'PROXMOX_POOL',    value: params.PROXMOX_POOL),
                            string(name: 'TEMPLATE',        value: params.TEMPLATE),
                            string(name: 'CORES',           value: params.CORES),
                            string(name: 'MEMORY',          value: params.MEMORY),
                            string(name: 'STORAGE',         value: params.STORAGE),
                            string(name: 'VM_NAME',         value: params.VM_NAME),
                            string(name: 'ROLE',            value: params.ROLE),
                            string(name: 'BRANCH',          value: params.BRANCH),
                            string(name: 'NETWORK',         value: params.NETWORK)
                        ],
                        propagate: true,
                        wait: true

                    copyArtifacts(
                        projectName: 'box-builder',
                        selector: specific("${buildbox.number}"),
                        filter: 'vm_metadata.json'
                    )
                    stash name: 'vm-metadata', includes: "vm_metadata.json"
                }
            }
        }
        stage('Provision Jenkins Agent') {
            steps {
                script {
                    dir('pipelines/jenkins-agent-builder') {
                        unstash 'agent-secrets'
                        if (params.USE_EXISTING_VM) {
                            writeFile file: 'vm_metadata.json', text: """{
    "vm_ipv4": "${params.EXISTING_AGENT_IP}",
    "vm_name": "${params.VM_NAME}",
    "role": "${params.ROLE}"
}"""
                        } else {
                            unstash 'vm-metadata'
                        }

                        withCredentials([sshUserPrivateKey(credentialsId: 'ssh-key', keyFileVariable: 'SSH_KEY_FILE')]) {
                            sh(script: """
                                chmod 600 "$SSH_KEY_FILE"
                                ls -l "$SSH_KEY_FILE"
                                head -n 2 "$SSH_KEY_FILE"
                                echo "running whoami:"
                                whoami
                                python deploy-agent.py \
                                    --secret-file ${SECRET_FILE} \
                                    --metadata-file vm_metadata.json \
                                    --ssh-key-file "$SSH_KEY_FILE" \
                                    --scp-dir "agent-configs" \
                                    --agent-name ${params.AGENT_NAME} \
                                    --master-ip ${params.JENKINS_HOSTNAME} \
                                    --docker-registry ${params.DOCKER_REGISTRY} \
                                    --ssh-user ${params.SSH_USERNAME}
                            """)
                        }
                    }
                }
            }
        }
    }
}
